(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webstompobs"] = factory();
	else
		root["webstompobs"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var client_1 = __webpack_require__(2);
	var utils_1 = __webpack_require__(28);
	// The `webstomp` Object
	var stompobservable = {
	    VERSIONS: utils_1.VERSIONS,
	    // This method creates a WebSocket client that is connected to
	    // the STOMP server located at the url.
	    client: function (url, options, protocols) {
	        if (options === void 0) { options = {}; }
	        if (protocols === void 0) { protocols = utils_1.VERSIONS.supportedProtocols(); }
	        var createWsConnection = function () { return new WebSocket(url, protocols); };
	        return new client_1.default(createWsConnection, options);
	    },
	    // This method is an alternative to `webstomp.client()` to let the user
	    // specify the WebSocket to use via the function createWsConnection
	    // (returning either a standard HTML5 WebSocket or a similar object).
	    over: function (createWsConnection, options) {
	        if (options === void 0) { options = {}; }
	        return new client_1.default(createWsConnection, options);
	    }
	};
	exports.default = stompobservable;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi93ZWJzdG9tcC1vYnMvc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQThCO0FBQzlCLGlDQUFpQztBQUdqQyx3QkFBd0I7QUFDeEIsSUFBTSxlQUFlLEdBQUc7SUFDcEIsUUFBUSxrQkFBQTtJQUNSLDhEQUE4RDtJQUM5RCx1Q0FBdUM7SUFDdkMsTUFBTSxFQUFFLFVBQVMsR0FBVyxFQUFFLE9BQTRDLEVBQUUsU0FBbUQ7UUFBakcsd0JBQUEsRUFBQSxVQUF5QixFQUFtQjtRQUFFLDBCQUFBLEVBQUEsWUFBc0IsZ0JBQVEsQ0FBQyxrQkFBa0IsRUFBRTtRQUMzSCxJQUFJLGtCQUFrQixHQUFxQixjQUFRLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFlLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDeEcsTUFBTSxDQUFDLElBQUksZ0JBQU0sQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsdUVBQXVFO0lBQ3ZFLG1FQUFtRTtJQUNuRSxxRUFBcUU7SUFDckUsSUFBSSxFQUFFLFVBQUMsa0JBQW9DLEVBQUUsT0FBNEM7UUFBNUMsd0JBQUEsRUFBQSxVQUF5QixFQUFtQjtRQUNyRixNQUFNLENBQUMsSUFBSSxnQkFBTSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDSixDQUFDO0FBRUYsa0JBQWUsZUFBZSxDQUFDIn0=

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var connectedClient_1 = __webpack_require__(3);
	var webSocketHandler_1 = __webpack_require__(26);
	var Observable_1 = __webpack_require__(4);
	var ReplaySubject_1 = __webpack_require__(30);
	__webpack_require__(21);
	var DEFAULT_MAX_CONNECT_ATTEMPT = 10;
	var DEFAULT_TTL_CONNECT_ATTEMPT = 1000;
	// STOMP Client Class
	//
	// All STOMP protocol is exposed as methods of this class ('connect()',
	// 'send()', etc.)
	var Client = (function () {
	    function Client(createWsConnection, options) {
	        var _this = this;
	        // [CONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECT_or_STOMP_Frame)
	        //
	        // Return an Observable containing the connectedClient
	        this.connect = function (headers) {
	            // create one and only one dedicated observable per destination
	            if (!_this.observableConnection) {
	                var multicastConnection = _this.__connect(headers)
	                    .multicast(function () { return new ReplaySubject_1.ReplaySubject(1); });
	                multicastConnection.connect();
	                _this.observableConnection = multicastConnection.refCount();
	            }
	            return _this.observableConnection;
	        };
	        this.__connect = function (headers) {
	            return Observable_1.Observable.create(function (observer) {
	                // we initialize only once the connection
	                _this.__initConnectedClient(headers, observer);
	                // when unsubscribe, we disconnect the websocket
	                return function () {
	                    _this.isConnected && _this.wsHandler.disconnect(headers);
	                };
	            });
	        };
	        this.__initConnectedClient = function (headers, currentObserver) {
	            clearTimeout(_this.connectTimeout);
	            // we initialize the connection
	            _this.wsHandler.initConnection(headers, function (ev) {
	                _this.isConnected = false;
	                if (_this.maxConnectAttempt === -1 || _this.nbConnectAttempt < _this.maxConnectAttempt) {
	                    _this.connectTimeout = setTimeout(
	                    // when unexpected disconnection happens, we reconnect
	                    function () { return _this.__initConnectedClient(headers, currentObserver); }, _this.nbConnectAttempt * _this.ttlConnectAttempt);
	                    _this.nbConnectAttempt++;
	                }
	                else {
	                    currentObserver.error('Attempted to connect ' + _this.nbConnectAttempt + ' failed.');
	                }
	            }).subscribe(function () {
	                _this.isConnected = true;
	                _this.nbConnectAttempt = 1;
	                currentObserver.next(new connectedClient_1.ConnectedClient(_this.wsHandler));
	            });
	        };
	        this.wsHandler = new webSocketHandler_1.default(createWsConnection, options);
	        this.nbConnectAttempt = 1;
	        this.maxConnectAttempt = options.maxConnectAttempt || DEFAULT_MAX_CONNECT_ATTEMPT;
	        this.ttlConnectAttempt = options.ttlConnectAttempt || DEFAULT_TTL_CONNECT_ATTEMPT;
	        this.isConnected = false;
	    }
	    return Client;
	}());
	exports.default = Client;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vd2Vic3RvbXAtb2JzL3NyYy9jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBb0Q7QUFFcEQsdURBQWtEO0FBRWxELDhDQUE2QztBQUU3QyxvREFBbUQ7QUFFbkQsdUNBQXFDO0FBaUJyQyxJQUFNLDJCQUEyQixHQUFXLEVBQUUsQ0FBQTtBQUM5QyxJQUFNLDJCQUEyQixHQUFXLElBQUksQ0FBQTtBQUVoRCxxQkFBcUI7QUFDckIsRUFBRTtBQUNGLHVFQUF1RTtBQUN2RSxrQkFBa0I7QUFDbEI7SUFVSSxnQkFBYSxrQkFBb0MsRUFBRSxPQUFzQjtRQUF6RSxpQkFNQztRQUVELCtGQUErRjtRQUMvRixFQUFFO1FBQ0Ysc0RBQXNEO1FBQy9DLFlBQU8sR0FBRyxVQUFDLE9BQTBCO1lBRXhDLCtEQUErRDtZQUMvRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQU0sbUJBQW1CLEdBQTJDLEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO3FCQUNsQixTQUFTLENBQUMsY0FBTSxPQUFBLElBQUksNkJBQWEsQ0FBQyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO2dCQUMvRyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDOUIsS0FBSSxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9ELENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSSxDQUFDLG9CQUFvQixDQUFDO1FBRXJDLENBQUMsQ0FBQTtRQUVPLGNBQVMsR0FBRyxVQUFDLE9BQTBCO1lBRTNDLE1BQU0sQ0FBQyx1QkFBVSxDQUFDLE1BQU0sQ0FDcEIsVUFBQyxRQUFtQztnQkFDaEMseUNBQXlDO2dCQUN6QyxLQUFJLENBQUMscUJBQXFCLENBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO2dCQUM5QyxnREFBZ0Q7Z0JBQ2hELE1BQU0sQ0FBQztvQkFDSCxLQUFJLENBQUMsV0FBVyxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzRCxDQUFDLENBQUE7WUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVWLENBQUMsQ0FBQTtRQUVPLDBCQUFxQixHQUFHLFVBQUMsT0FBMEIsRUFDckMsZUFBMEM7WUFFNUQsWUFBWSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUNqQywrQkFBK0I7WUFDL0IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUNqQyxVQUFDLEVBQU87Z0JBQ0osS0FBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztvQkFDbEYsS0FBSSxDQUFDLGNBQWMsR0FBRyxVQUFVO29CQUM1QixzREFBc0Q7b0JBQ3RELGNBQU0sT0FBQSxLQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUNwQyxlQUFlLENBQUMsRUFEZCxDQUNjLEVBQ3BCLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFJLENBQUMsaUJBQWlCLENBQ2pELENBQUM7b0JBQ0YsS0FBSSxDQUFDLGdCQUFnQixFQUFHLENBQUM7Z0JBQzdCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osZUFBZSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLENBQUM7Z0JBQ3hGLENBQUM7WUFDTCxDQUFDLENBQ0osQ0FBQyxTQUFTLENBQUM7Z0JBQ1IsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQ0FBZSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzlELENBQUMsQ0FBQyxDQUFDO1FBRVAsQ0FBQyxDQUFBO1FBL0RHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSwwQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsaUJBQWlCLElBQUksMkJBQTJCLENBQUM7UUFDbEYsSUFBSSxDQUFDLGlCQUFpQixHQUFJLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSwyQkFBMkIsQ0FBQztRQUNuRixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBNERMLGFBQUM7QUFBRCxDQUFDLEFBNUVELElBNEVDO0FBRUQsa0JBQWUsTUFBTSxDQUFDIn0=

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var Observable_1 = __webpack_require__(4);
	var Subject_1 = __webpack_require__(18);
	__webpack_require__(21);
	__webpack_require__(24);
	// STOMP Connected Client Class
	//
	var ConnectedClient = (function () {
	    function ConnectedClient(webSocketClient) {
	        var _this = this;
	        // on Message event
	        // return true if it can handle the reception, false otherwise
	        this._onMessageReceivedFn = function (subscription) {
	            // the `_onMessageReceivedFn` callback is registered when the client calls
	            // `subscribe()`.
	            var onreceive = _this.subscriptions[subscription] && _this.subscriptions[subscription].next.bind(_this.subscriptions[subscription]);
	            return onreceive;
	        };
	        // on Error Received event
	        // return true if it can handle the reception, false otherwise
	        this._onErrorReceivedFn = function () {
	            // the `_onErrorReceivedFn` callback is registered when the client calls
	            // `error()`.
	            var onerror = _this.broadcastErrorObserver &&
	                _this.broadcastErrorObserver.next.bind(_this.broadcastErrorObserver);
	            return onerror;
	        };
	        // on Connection Error Received event
	        // return true if it can handle the reception, false otherwise
	        this._onConnectionErrorReceivedFn = function () {
	            // the `_onConnectionErrorReceivedFn` callback is registered when the client calls
	            // `connectionError()`.
	            var onConnectionError = _this.broadcastConnectionErrorObserver &&
	                _this.broadcastConnectionErrorObserver.next.bind(_this.broadcastConnectionErrorObserver);
	            return onConnectionError;
	        };
	        // on Message Receipt event
	        // return true if it can handle the reception, false otherwise
	        this._onMessageReceiptedFn = function () {
	            // the `_onMessageReceiptedFn` callback is registered when the client calls
	            // `receipt()`.
	            var onreceipt = _this.broadcastReceipterObserver && _this.broadcastReceipterObserver.next.bind(_this.broadcastReceipterObserver);
	            return onreceipt;
	        };
	        // [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)
	        this.send = function (destination, body, headers) {
	            if (body === void 0) { body = ''; }
	            if (headers === void 0) { headers = { destination: destination }; }
	            var headerToSend = __assign({}, headers, { destination: destination });
	            _this.webSocketClient.send(headerToSend, body);
	        };
	        // [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)
	        this.begin = function (transaction) {
	            return _this.webSocketClient.begin(transaction);
	        };
	        // [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)
	        this.commit = function (transaction) {
	            _this.webSocketClient.commit(transaction);
	        };
	        // [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)
	        this.abort = function (transaction) {
	            _this.webSocketClient.abort(transaction);
	        };
	        // [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)
	        this.ack = function (messageID, subscription, headers) {
	            _this.webSocketClient.ack(messageID, subscription, headers);
	        };
	        // [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)
	        this.nack = function (messageID, subscription, headers) {
	            _this.webSocketClient.nack(messageID, subscription, headers);
	        };
	        // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)
	        this.receipt = function () {
	            // create one and only one broadcast receiver
	            if (!_this.broadcastReceipterObservable) {
	                var connectedSubscribe = Observable_1.Observable.create(function (observer) {
	                    _this.broadcastReceipterObserver = observer;
	                })
	                    .finally(function () { return _this.broadcastReceipterObserver ? _this.broadcastReceipterObserver = null : null; })
	                    .multicast(function () { return new Subject_1.Subject(); });
	                connectedSubscribe.connect();
	                _this.broadcastReceipterObservable = connectedSubscribe.refCount();
	            }
	            return _this.broadcastReceipterObservable;
	        };
	        // Return an Observable containing the event when a connection error occure
	        this.connectionError = function () {
	            // create one and only one broadcast receiver
	            if (!_this.broadcastConnectionErrorObservable) {
	                var connectionErrorSubscribe = Observable_1.Observable.create(function (observer) {
	                    _this.broadcastConnectionErrorObserver = observer;
	                })
	                    .finally(function () { return _this.broadcastConnectionErrorObserver ? _this.broadcastConnectionErrorObserver = null : null; })
	                    .multicast(function () { return new Subject_1.Subject(); });
	                connectionErrorSubscribe.connect();
	                _this.broadcastConnectionErrorObservable = connectionErrorSubscribe.refCount();
	            }
	            return _this.broadcastConnectionErrorObservable;
	        };
	        // Return an Observable containing the error when an error occure
	        this.error = function () {
	            // create one and only one broadcast receiver
	            if (!_this.broadcastErrorObservable) {
	                var connectedSubscribe = Observable_1.Observable.create(function (observer) {
	                    _this.broadcastErrorObserver = observer;
	                })
	                    .finally(function () { return _this.broadcastErrorObserver ? _this.broadcastErrorObserver = null : null; })
	                    .multicast(function () { return new Subject_1.Subject(); });
	                connectedSubscribe.connect();
	                _this.broadcastErrorObservable = connectedSubscribe.refCount();
	            }
	            return _this.broadcastErrorObservable;
	        };
	        // subscribe to a destination
	        // return an Observable which you can unsubscribe
	        this.subscribe = function (destination, headers) {
	            if (headers === void 0) { headers = {}; }
	            return Observable_1.Observable.create(function (observer) {
	                var id = headers.id || 'sub-' + _this.counter++;
	                var currentHeader = { destination: destination, ack: headers.ack, id: id };
	                _this.subscriptions[currentHeader.id] = observer;
	                _this.webSocketClient.subscribe(currentHeader);
	                return function () {
	                    _this.webSocketClient.unSubscribe(currentHeader);
	                    delete _this.subscriptions[currentHeader.id];
	                };
	            });
	        };
	        // subscribe to a destination only once for multiple subscribers
	        // return an Observable which you can unsubscribe
	        this.subscribeBroadcast = function (destination, headers) {
	            if (headers === void 0) { headers = {}; }
	            // create one and only one dedicated observable per destination
	            if (!_this.broadcastSubscribers[destination]) {
	                var connectedSubscribe = _this.subscribe(destination, headers)
	                    .finally(function () { return _this.broadcastSubscribers[destination] ? delete _this.broadcastSubscribers[destination] : null; })
	                    .multicast(function () { return new Subject_1.Subject(); });
	                connectedSubscribe.connect();
	                _this.broadcastSubscribers[destination] = connectedSubscribe.refCount();
	            }
	            return _this.broadcastSubscribers[destination];
	        };
	        this.webSocketClient = webSocketClient;
	        this.webSocketClient.onMessageReceived = this._onMessageReceivedFn;
	        this.webSocketClient.onMessageReceipted = this._onMessageReceiptedFn;
	        this.webSocketClient.onErrorReceived = this._onErrorReceivedFn;
	        this.webSocketClient.onConnectionError = this._onConnectionErrorReceivedFn;
	        // used to index subscribers
	        this.counter = 0;
	        // subscription callbacks indexed by subscriber's ID
	        this.subscriptions = {};
	        this.broadcastSubscribers = {};
	    }
	    return ConnectedClient;
	}());
	exports.ConnectedClient = ConnectedClient;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vd2Vic3RvbXAtb2JzL3NyYy9jb25uZWN0ZWRDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLDhDQUE2QztBQUU3Qyx3Q0FBdUM7QUFFdkMsdUNBQXFDO0FBQ3JDLHFDQUFtQztBQVluQywrQkFBK0I7QUFDL0IsRUFBRTtBQUNGO0lBYUkseUJBQVksZUFBaUM7UUFBN0MsaUJBWUM7UUFFRCxtQkFBbUI7UUFDbkIsOERBQThEO1FBQ3RELHlCQUFvQixHQUFHLFVBQUMsWUFBb0I7WUFDaEQsMEVBQTBFO1lBQzFFLGlCQUFpQjtZQUNqQixJQUFNLFNBQVMsR0FBb0IsS0FBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3BKLE1BQU0sQ0FBQyxTQUFTLENBQUE7UUFDcEIsQ0FBQyxDQUFBO1FBRUQsMEJBQTBCO1FBQzFCLDhEQUE4RDtRQUN0RCx1QkFBa0IsR0FBRztZQUN6Qix3RUFBd0U7WUFDeEUsYUFBYTtZQUNiLElBQU0sT0FBTyxHQUFvQixLQUFJLENBQUMsc0JBQXNCO2dCQUMzQixLQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNwRyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2xCLENBQUMsQ0FBQTtRQUVELHFDQUFxQztRQUNyQyw4REFBOEQ7UUFDdEQsaUNBQTRCLEdBQUc7WUFDbkMsa0ZBQWtGO1lBQ2xGLHVCQUF1QjtZQUN2QixJQUFNLGlCQUFpQixHQUE2QixLQUFJLENBQUMsZ0NBQWdDO2dCQUM1QyxLQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztZQUNwSSxNQUFNLENBQUMsaUJBQWlCLENBQUE7UUFDNUIsQ0FBQyxDQUFBO1FBRUQsMkJBQTJCO1FBQzNCLDhEQUE4RDtRQUN0RCwwQkFBcUIsR0FBRztZQUM1QiwyRUFBMkU7WUFDM0UsZUFBZTtZQUNmLElBQU0sU0FBUyxHQUFvQixLQUFJLENBQUMsMEJBQTBCLElBQUksS0FBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDakosTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUNwQixDQUFDLENBQUE7UUFFRCwwRUFBMEU7UUFDbkUsU0FBSSxHQUFHLFVBQUMsV0FBbUIsRUFBRSxJQUFpQixFQUFFLE9BQW9DO1lBQXZELHFCQUFBLEVBQUEsU0FBaUI7WUFBRSx3QkFBQSxFQUFBLFlBQXdCLFdBQVcsYUFBQSxFQUFDO1lBQ3ZGLElBQU0sWUFBWSxnQkFBUSxPQUFPLElBQUUsV0FBVyxhQUFBLEdBQUMsQ0FBQztZQUNoRCxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFBO1FBRUQsNEVBQTRFO1FBQ3JFLFVBQUssR0FBRyxVQUFDLFdBQW9CO1lBQ2hDLE1BQU0sQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUE7UUFFRCw4RUFBOEU7UUFDdkUsV0FBTSxHQUFHLFVBQUMsV0FBbUI7WUFDaEMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFBO1FBRUQsNEVBQTRFO1FBQ3JFLFVBQUssR0FBRyxVQUFDLFdBQW1CO1lBQy9CLEtBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQTtRQUVELHdFQUF3RTtRQUNqRSxRQUFHLEdBQUcsVUFBQyxTQUFpQixFQUFFLFlBQW9CLEVBQUUsT0FBb0I7WUFDdkUsS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM5RCxDQUFDLENBQUE7UUFFRCwwRUFBMEU7UUFDbkUsU0FBSSxHQUFHLFVBQUMsU0FBaUIsRUFBRSxZQUFvQixFQUFFLE9BQW9CO1lBQ3hFLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDL0QsQ0FBQyxDQUFBO1FBRUQsZ0ZBQWdGO1FBQ3pFLFlBQU8sR0FBRztZQUViLDZDQUE2QztZQUM3QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLElBQU0sa0JBQWtCLEdBQWlDLHVCQUFVLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBeUI7b0JBQzdGLEtBQUksQ0FBQywwQkFBMEIsR0FBRyxRQUFRLENBQUE7Z0JBQzlDLENBQUMsQ0FBQztxQkFDRCxPQUFPLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBL0UsQ0FBK0UsQ0FBQztxQkFDOUYsU0FBUyxDQUFDLGNBQU0sT0FBQSxJQUFJLGlCQUFPLEVBQUUsRUFBYixDQUFhLENBQUMsQ0FBQTtnQkFFbkMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzdCLEtBQUksQ0FBQyw0QkFBNEIsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0RSxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQztRQUU3QyxDQUFDLENBQUE7UUFFRCwyRUFBMkU7UUFDcEUsb0JBQWUsR0FBRztZQUVyQiw2Q0FBNkM7WUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFNLHdCQUF3QixHQUFzQyx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQThCO29CQUM3RyxLQUFJLENBQUMsZ0NBQWdDLEdBQUcsUUFBUSxDQUFBO2dCQUNwRCxDQUFDLENBQUM7cUJBQ0QsT0FBTyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZ0NBQWdDLEdBQUcsS0FBSSxDQUFDLGdDQUFnQyxHQUFHLElBQUksR0FBRyxJQUFJLEVBQTNGLENBQTJGLENBQUM7cUJBQzFHLFNBQVMsQ0FBQyxjQUFNLE9BQUEsSUFBSSxpQkFBTyxFQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUE7Z0JBRW5DLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNuQyxLQUFJLENBQUMsa0NBQWtDLEdBQUcsd0JBQXdCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEYsQ0FBQztZQUNELE1BQU0sQ0FBQyxLQUFJLENBQUMsa0NBQWtDLENBQUM7UUFFbkQsQ0FBQyxDQUFBO1FBRUQsaUVBQWlFO1FBQzFELFVBQUssR0FBRztZQUVYLDZDQUE2QztZQUM3QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLElBQU0sa0JBQWtCLEdBQWlDLHVCQUFVLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBeUI7b0JBQzdGLEtBQUksQ0FBQyxzQkFBc0IsR0FBRyxRQUFRLENBQUE7Z0JBQzFDLENBQUMsQ0FBQztxQkFDRCxPQUFPLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBdkUsQ0FBdUUsQ0FBQztxQkFDdEYsU0FBUyxDQUFDLGNBQU0sT0FBQSxJQUFJLGlCQUFPLEVBQUUsRUFBYixDQUFhLENBQUMsQ0FBQTtnQkFFbkMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzdCLEtBQUksQ0FBQyx3QkFBd0IsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsRSxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUV6QyxDQUFDLENBQUE7UUFFRCw2QkFBNkI7UUFDN0IsaURBQWlEO1FBQzFDLGNBQVMsR0FBRyxVQUFDLFdBQW1CLEVBQUUsT0FBc0M7WUFBdEMsd0JBQUEsRUFBQSxZQUFzQztZQUUzRSxNQUFNLENBQUMsdUJBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUF5QjtnQkFDL0MsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsSUFBSSxNQUFNLEdBQUcsS0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNqRCxJQUFNLGFBQWEsR0FBcUIsRUFBQyxXQUFXLGFBQUEsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUEsRUFBRSxDQUFDO2dCQUM3RSxLQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7Z0JBRWhELEtBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNLENBQUM7b0JBQ0gsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ2hELE9BQU8sS0FBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2hELENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFBO1FBRU4sQ0FBQyxDQUFBO1FBRUQsZ0VBQWdFO1FBQ2hFLGlEQUFpRDtRQUMxQyx1QkFBa0IsR0FBRyxVQUFDLFdBQW1CLEVBQUUsT0FBc0M7WUFBdEMsd0JBQUEsRUFBQSxZQUFzQztZQUNwRiwrREFBK0Q7WUFDL0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxJQUFNLGtCQUFrQixHQUFpQyxLQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUM7cUJBQ3hGLE9BQU8sQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxHQUFHLE9BQU8sS0FBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksRUFBN0YsQ0FBNkYsQ0FBQztxQkFDNUcsU0FBUyxDQUFDLGNBQU0sT0FBQSxJQUFJLGlCQUFPLEVBQUUsRUFBYixDQUFhLENBQUMsQ0FBQTtnQkFFbkMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzdCLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzRSxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUE7UUF0S0csSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUE7UUFDbEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUE7UUFDcEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFBO1FBQzlELElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFBO1FBQzFFLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBOEpMLHNCQUFDO0FBQUQsQ0FBQyxBQXZMRCxJQXVMQztBQXZMWSwwQ0FBZSJ9

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(5);
	var toSubscriber_1 = __webpack_require__(6);
	var observable_1 = __webpack_require__(17);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._trySubscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.syncErrorThrown = true;
	            sink.syncErrorValue = err;
	            sink.error(err);
	        }
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            // Must be declared in a separate statement to avoid a RefernceError when
	            // accessing subscription below in the closure due to Temporal Dead Zone.
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	// CommonJS / Node have global context exposed as "global" variable.
	// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
	// the global "global" var for now.
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	var _root = __window || __global || __self;
	exports.root = _root;
	// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
	// This is needed when used with angular/tsickle which inserts a goog.module statement.
	// Wrap in IIFE
	(function () {
	    if (!_root) {
	        throw new Error('RxJS could not find any global context (window, self, global)');
	    }
	})();
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(7);
	var rxSubscriber_1 = __webpack_require__(16);
	var Observer_1 = __webpack_require__(15);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(8);
	var Subscription_1 = __webpack_require__(9);
	var Observer_1 = __webpack_require__(15);
	var rxSubscriber_1 = __webpack_require__(16);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        this._parent = null;
	        this._parents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parent = _parent;
	        this._parents = _parents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== Observer_1.empty) {
	                context = Object.create(observerOrNext);
	                if (isFunction_1.isFunction(context.unsubscribe)) {
	                    this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = this.unsubscribe.bind(this);
	            }
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._error) {
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parentSubscriber.syncErrorValue = err;
	                _parentSubscriber.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(10);
	var isObject_1 = __webpack_require__(11);
	var isFunction_1 = __webpack_require__(8);
	var tryCatch_1 = __webpack_require__(12);
	var errorObject_1 = __webpack_require__(13);
	var UnsubscriptionError_1 = __webpack_require__(14);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        this._parent = null;
	        this._parents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parent = null;
	        this._parents = null;
	        // null out _subscriptions first so any child subscriptions that attempt
	        // to remove themselves from this subscription will noop
	        this._subscriptions = null;
	        var index = -1;
	        var len = _parents ? _parents.length : 0;
	        // if this._parent is null, then so is this._parents, and we
	        // don't have to remove ourselves from any parent subscriptions.
	        while (_parent) {
	            _parent.remove(this);
	            // if this._parents is null or index >= len,
	            // then _parent is set to null, and the loop exits
	            _parent = ++index < len && _parents[index] || null;
	        }
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            index = -1;
	            len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var subscription = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var subscriptions = this._subscriptions || (this._subscriptions = []);
	        subscriptions.push(subscription);
	        subscription._addParent(this);
	        return subscription;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        if (!_parent || _parent === parent) {
	            // If we don't have a parent, or the new parent is the same as the
	            // current parent, then set this._parent to the new parent.
	            this._parent = parent;
	        }
	        else if (!_parents) {
	            // If there's already one parent, but not multiple, allocate an Array to
	            // store the rest of the parent Subscriptions.
	            this._parents = [parent];
	        }
	        else if (_parents.indexOf(parent) === -1) {
	            // Only add the new parent to the _parents list if it's not already there.
	            _parents.push(parent);
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(13);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(5);
	var Symbol = root_1.root.Symbol;
	exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	/**
	 * @deprecated use rxSubscriber instead
	 */
	exports.$$rxSubscriber = exports.rxSubscriber;
	//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(5);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.observable = getSymbolObservable(root_1.root);
	/**
	 * @deprecated use observable instead
	 */
	exports.$$observable = exports.observable;
	//# sourceMappingURL=observable.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(4);
	var Subscriber_1 = __webpack_require__(7);
	var Subscription_1 = __webpack_require__(9);
	var ObjectUnsubscribedError_1 = __webpack_require__(19);
	var SubjectSubscription_1 = __webpack_require__(20);
	var rxSubscriber_1 = __webpack_require__(16);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(9);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var multicast_1 = __webpack_require__(22);
	Observable_1.Observable.prototype.multicast = multicast_1.multicast;
	//# sourceMappingURL=multicast.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var ConnectableObservable_1 = __webpack_require__(23);
	/* tslint:enable:max-line-length */
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} An Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    if (typeof selector === 'function') {
	        return this.lift(new MulticastOperator(subjectFactory, selector));
	    }
	    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
	    connectable.source = this;
	    connectable.subjectFactory = subjectFactory;
	    return connectable;
	}
	exports.multicast = multicast;
	var MulticastOperator = (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	exports.MulticastOperator = MulticastOperator;
	//# sourceMappingURL=multicast.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(18);
	var Observable_1 = __webpack_require__(4);
	var Subscriber_1 = __webpack_require__(7);
	var Subscription_1 = __webpack_require__(9);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	        this._isComplete = false;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            this._isComplete = false;
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	var connectableProto = ConnectableObservable.prototype;
	exports.connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subject: { value: null, writable: true },
	    _connection: { value: null, writable: true },
	    _subscribe: { value: connectableProto._subscribe },
	    _isComplete: { value: connectableProto._isComplete, writable: true },
	    getSubject: { value: connectableProto.getSubject },
	    connect: { value: connectableProto.connect },
	    refCount: { value: connectableProto.refCount }
	};
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this.connectable._isComplete = true;
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var finally_1 = __webpack_require__(25);
	Observable_1.Observable.prototype.finally = finally_1._finally;
	Observable_1.Observable.prototype._finally = finally_1._finally;
	//# sourceMappingURL=finally.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(7);
	var Subscription_1 = __webpack_require__(9);
	/**
	 * Returns an Observable that mirrors the source Observable, but will call a specified function when
	 * the source terminates on complete or error.
	 * @param {function} callback Function to be called when source terminates.
	 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
	 * @method finally
	 * @owner Observable
	 */
	function _finally(callback) {
	    return this.lift(new FinallyOperator(callback));
	}
	exports._finally = _finally;
	var FinallyOperator = (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FinallySubscriber = (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        _super.call(this, destination);
	        this.add(new Subscription_1.Subscription(callback));
	    }
	    return FinallySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=finally.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var Observable_1 = __webpack_require__(4);
	var frame_1 = __webpack_require__(27);
	var utils_1 = __webpack_require__(28);
	var heartbeat_1 = __webpack_require__(29);
	// STOMP Client Class
	//
	// All STOMP protocol is exposed as methods of this class ('connect()',
	// 'send()', etc.)
	var WebSocketHandler = (function () {
	    function WebSocketHandler(createWsConnection, options) {
	        var _this = this;
	        this.initConnection = function (headers, onDisconnect) {
	            return Observable_1.Observable.create(function (observer) {
	                if (_this.ws) {
	                    throw 'Error, the connection has already been created !';
	                }
	                _this.ws = _this.createWS();
	                if (!_this.ws) {
	                    throw 'Error, createWsConnection function returned null !';
	                }
	                _this.ws.binaryType = 'arraybuffer';
	                _this._debug('Opening Web Socket...');
	                _this.ws.onmessage = function (evt) {
	                    var data = evt.data;
	                    if (evt.data instanceof ArrayBuffer) {
	                        data = utils_1.typedArrayToUnicodeString(new Uint8Array(evt.data));
	                    }
	                    _this.heartbeat.activityFromServer();
	                    // heartbeat
	                    if (data === utils_1.BYTES.LF) {
	                        _this._debug("<<< PONG");
	                        return;
	                    }
	                    _this._debug("<<< " + data);
	                    // Handle STOMP frames received from the server
	                    // The unmarshall function returns the frames parsed and any remaining
	                    // data from partial frames.
	                    var unmarshalledData = frame_1.default.unmarshall(_this.partialData + data);
	                    _this.partialData = unmarshalledData.partial;
	                    unmarshalledData.frames.forEach(function (frame) {
	                        switch (frame.command) {
	                            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECTED_Frame)
	                            case 'CONNECTED':
	                                _this._debug("connected to server " + frame.headers.server);
	                                _this.connected = true;
	                                _this.version = frame.headers.version;
	                                observer.next(null);
	                                _this._setupHeartbeat(_this.ws, frame.headers);
	                                break;
	                            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.1.html#MESSAGE)
	                            case 'MESSAGE':
	                                // the 'onreceive' callback is registered when the client calls
	                                // 'subscribe()'.
	                                // If there is registered subscription for the received message,
	                                // we used the default 'onreceive' method that the client can set.
	                                // This is useful for subscriptions that are automatically created
	                                // on the browser side (e.g. [RabbitMQ's temporary
	                                // queues](http://www.rabbitmq.com/stomp.html)).
	                                var subscription = frame.headers.subscription;
	                                var onreceive = _this.onMessageReceived && _this.onMessageReceived(subscription);
	                                if (onreceive) {
	                                    // 1.2 define ack header if ack is set to client
	                                    // and this header must be used for ack/nack
	                                    var messageID = _this.version === utils_1.VERSIONS.V1_2 &&
	                                        frame.headers.ack ||
	                                        frame.headers['message-id'];
	                                    // add 'ack()' and 'nack()' methods directly to the returned frame
	                                    // so that a simple call to 'message.ack()' can acknowledge the message.
	                                    frame.ack = _this.ack.bind(_this, messageID, subscription);
	                                    frame.nack = _this.nack.bind(_this, messageID, subscription);
	                                    onreceive(frame);
	                                }
	                                else {
	                                    _this._debug("Unhandled received MESSAGE: " + frame);
	                                }
	                                break;
	                            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)
	                            //
	                            // The client instance can set its 'onreceipt' field to a function taking
	                            // a frame argument that will be called when a receipt is received from
	                            // the server:
	                            //
	                            //     client.onreceipt = function(frame) {
	                            //       receiptID = frame.headers['receipt-id'];
	                            //       ...
	                            //     }
	                            case 'RECEIPT':
	                                if (_this.onMessageReceipted)
	                                    _this.onMessageReceipted()(frame);
	                                break;
	                            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.1.html#ERROR)
	                            case 'ERROR':
	                                if (_this.onErrorReceived)
	                                    _this.onErrorReceived()(frame);
	                                break;
	                            default:
	                                _this._debug("Unhandled frame: " + frame);
	                        }
	                    });
	                };
	                _this.ws.onclose = function (ev) {
	                    _this._debug("Whoops! Lost connection to " + _this.ws.url + ":", ev);
	                    _this.heartbeat.stopHeartbeat();
	                    _this.ws = null;
	                    _this.onConnectionError && _this.onConnectionError()(ev);
	                    onDisconnect(ev);
	                };
	                _this.ws.onopen = function () {
	                    _this._debug('Web Socket Opened...');
	                    headers['accept-version'] = utils_1.VERSIONS.supportedVersions();
	                    // Check if we already have heart-beat in headers before adding them
	                    if (!headers['heart-beat']) {
	                        headers['heart-beat'] = [_this.heartbeatSettings.outgoing, _this.heartbeatSettings.incoming].join(',');
	                    }
	                    _this._transmit('CONNECT', headers);
	                };
	                return function () {
	                    _this.disconnect(headers);
	                };
	            });
	        };
	        // Heart-beat negotiation
	        this._setupHeartbeat = function (ws, headers) {
	            var send = function (data) { return _this._wsSend(ws, data); };
	            _this.heartbeat.startHeartbeat(headers, { send: send, close: ws.close });
	        };
	        // [DISCONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#DISCONNECT)
	        this.disconnect = function (headers) {
	            if (headers === void 0) { headers = {}; }
	            _this.heartbeat.stopHeartbeat();
	            _this.connected = false;
	            if (_this.ws) {
	                _this.ws.onclose = null;
	                _this._transmit('DISCONNECT', headers);
	                _this.ws.close();
	                _this.ws = null;
	            }
	        };
	        // [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)
	        //
	        // * 'destination' is MANDATORY.
	        this.send = function (headers, body) {
	            if (headers === void 0) { headers = {}; }
	            if (body === void 0) { body = ''; }
	            _this._transmit('SEND', headers, body);
	        };
	        // [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)
	        //
	        // If no transaction ID is passed, one will be created automatically
	        this.begin = function (transaction) {
	            if (transaction === void 0) { transaction = "tx-" + _this.counter++; }
	            _this._transmit('BEGIN', { transaction: transaction });
	            return {
	                id: transaction,
	                commit: _this.commit.bind(_this, transaction),
	                abort: _this.abort.bind(_this, transaction)
	            };
	        };
	        // [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)
	        //
	        // * 'transaction' is MANDATORY.
	        //
	        // It is preferable to commit a transaction by calling 'commit()' directly on
	        // the object returned by 'client.begin()':
	        //
	        //     var tx = client.begin(txid);
	        //     ...
	        //     tx.commit();
	        this.commit = function (transaction) {
	            _this._transmit('COMMIT', { transaction: transaction });
	        };
	        // [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)
	        //
	        // * 'transaction' is MANDATORY.
	        //
	        // It is preferable to abort a transaction by calling 'abort()' directly on
	        // the object returned by 'client.begin()':
	        //
	        //     var tx = client.begin(txid);
	        //     ...
	        //     tx.abort();
	        this.abort = function (transaction) {
	            _this._transmit('ABORT', { transaction: transaction });
	        };
	        // [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)
	        //
	        // * 'messageID' & 'subscription' are MANDATORY.
	        //
	        // It is preferable to acknowledge a message by calling 'ack()' directly
	        // on the message handled by a subscription callback:
	        //
	        //     client.subscribe(destination,
	        //       function(message) {
	        //         // process the message
	        //         // acknowledge it
	        //         message.ack();
	        //       },
	        //       {'ack': 'client'}
	        //     );
	        this.ack = function (messageID, subscription, headers) {
	            var currentHeader = __assign({}, headers);
	            currentHeader[_this._getIdAttr()] = messageID;
	            currentHeader.subscription = subscription;
	            _this._transmit('ACK', currentHeader);
	        };
	        // [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)
	        //
	        // * 'messageID' & 'subscription' are MANDATORY.
	        //
	        // It is preferable to nack a message by calling 'nack()' directly on the
	        // message handled by a subscription callback:
	        //
	        //     client.subscribe(destination,
	        //       function(message) {
	        //         // process the message
	        //         // an error occurs, nack it
	        //         message.nack();
	        //       },
	        //       {'ack': 'client'}
	        //     );
	        this.nack = function (messageID, subscription, headers) {
	            var currentHeader = __assign({}, headers);
	            currentHeader[_this._getIdAttr()] = messageID;
	            currentHeader.subscription = subscription;
	            _this._transmit('NACK', currentHeader);
	        };
	        this._getIdAttr = function () {
	            return _this.version === utils_1.VERSIONS.V1_2 ? 'id' : 'message-id';
	        };
	        // [SUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#SUBSCRIBE)
	        this.subscribe = function (headers) {
	            _this._transmit('SUBSCRIBE', headers);
	            return {
	                id: headers.id,
	                unsubscribe: _this.unSubscribe.bind(_this, headers.id)
	            };
	        };
	        // [UNSUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#UNSUBSCRIBE)
	        //
	        // * 'id' is MANDATORY.
	        //
	        // It is preferable to unsubscribe from a subscription by calling
	        // 'unsubscribe()' directly on the object returned by 'client.subscribe()':
	        //
	        //     var subscription = client.subscribe(destination, onmessage);
	        //     ...
	        //     subscription.unsubscribe(headers);
	        this.unSubscribe = function (headers) {
	            _this._transmit('UNSUBSCRIBE', headers);
	        };
	        // Base method to transmit any stomp frame
	        this._transmit = function (command, headers, body) {
	            if (!_this.ws) {
	                throw 'Error, this.ws is null ! Possibly initConnection has not been called or not subscribed !';
	            }
	            var out = frame_1.default.marshall(command, headers, body);
	            _this._debug(">>> " + out);
	            _this._wsSend(_this.ws, out);
	        };
	        this._wsSend = function (ws, data) {
	            if (_this.isBinary)
	                data = utils_1.unicodeStringToTypedArray(data);
	            _this._debug(">>> length " + data.length);
	            // if necessary, split the *STOMP* frame to send it on many smaller
	            // *IWebSocket* frames
	            while (true) {
	                if (data.length > _this.maxWebSocketFrameSize) {
	                    ws.send(data.slice(0, _this.maxWebSocketFrameSize));
	                    data = data.slice(_this.maxWebSocketFrameSize);
	                    _this._debug("remaining = " + data.length);
	                }
	                else {
	                    return ws.send(data);
	                }
	            }
	        };
	        // //// Debugging
	        //
	        // By default, debug messages are logged in the window's console if it is defined.
	        // This method is called for every actual transmission of the STOMP frames over the
	        // IWebSocket.
	        //
	        // It is possible to set a 'this._debug(message)' method
	        // on a client instance to handle differently the debug messages:
	        //
	        //     client.debug = function(str) {
	        //         // append the debug log to a #debug div
	        //         $("#debug").append(str + "\n");
	        //     };
	        this._debug = function (message) {
	            var args = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                args[_i - 1] = arguments[_i];
	            }
	            if (_this.hasDebug)
	                console.log.apply(console, [message].concat(args));
	        };
	        // cannot have default options object + destructuring in the same time in method signature
	        var _a = options.binary, binary = _a === void 0 ? false : _a, _b = options.debug, debug = _b === void 0 ? false : _b, _c = options.heartbeat, heartbeat = _c === void 0 ? { outgoing: 10000, incoming: 10000 } : _c;
	        this.hasDebug = !!debug;
	        this.connected = false;
	        // Heartbeat properties of the client
	        // outgoing: send heartbeat every 10s by default (value is in ms)
	        // incoming: expect to receive server heartbeat at least every 10s by default
	        // falsy value means no heartbeat hence 0,0
	        this.heartbeatSettings = heartbeat || { outgoing: 0, incoming: 0 };
	        this.heartbeat = new heartbeat_1.default(this.heartbeatSettings, this._debug);
	        this.partialData = '';
	        this.createWS = createWsConnection;
	        this.isBinary = !!binary;
	        // used to index subscribers
	        this.counter = 0;
	        // maximum *IWebSocket* frame size sent by the client. If the STOMP frame
	        // is bigger than this value, the STOMP frame will be sent using multiple
	        // IWebSocket frames (default is 16KiB)
	        this.maxWebSocketFrameSize = 16 * 1024;
	    }
	    return WebSocketHandler;
	}());
	exports.default = WebSocketHandler;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(28);
	// [STOMP Frame](http://stomp.github.com/stomp-specification-1.1.html#STOMP_Frames) Class
	var Frame = (function () {
	    // Frame constructor
	    function Frame(command, headers, body) {
	        if (headers === void 0) { headers = {}; }
	        if (body === void 0) { body = ''; }
	        var _this = this;
	        // Provides a textual representation of the frame
	        // suitable to be sent to the server
	        this.toString = function () {
	            var lines = [_this.command], skipContentLength = _this.headers['content-length'] === false;
	            if (skipContentLength)
	                delete _this.headers['content-length'];
	            Object.keys(_this.headers).forEach(function (name) {
	                var value = _this.headers[name];
	                lines.push(name + ":" + value);
	            });
	            if (_this.body && !skipContentLength) {
	                lines.push("content-length:" + utils_1.sizeOfUTF8(_this.body));
	            }
	            lines.push(utils_1.BYTES.LF + _this.body);
	            return lines.join(utils_1.BYTES.LF);
	        };
	        this.command = command;
	        this.headers = headers;
	        this.body = body;
	    }
	    // Unmarshall a single STOMP frame from a `data` string
	    Frame.unmarshallSingle = function (data) {
	        // search for 2 consecutives LF byte to split the command
	        // and headers from the body
	        var divider = data.search(new RegExp(utils_1.BYTES.LF + utils_1.BYTES.LF)), headerLines = data.substring(0, divider).split(utils_1.BYTES.LF), command = headerLines.shift(), headers = {}, body = '', 
	        // skip the 2 LF bytes that divides the headers from the body
	        bodyIndex = divider + 2;
	        // Parse headers in reverse order so that for repeated headers, the 1st
	        // value is used
	        for (var _i = 0, _a = headerLines.reverse(); _i < _a.length; _i++) {
	            var line = _a[_i];
	            var idx = line.indexOf(':');
	            headers[utils_1.trim(line.substring(0, idx))] = utils_1.trim(line.substring(idx + 1));
	        }
	        // Parse body
	        // check for content-length or topping at the first NULL byte found.
	        if (headers['content-length']) {
	            var len = parseInt(headers['content-length'], 10);
	            body = ('' + data).substring(bodyIndex, bodyIndex + len);
	        }
	        else {
	            var chr = null;
	            for (var i = bodyIndex; i < data.length; i++) {
	                chr = data.charAt(i);
	                if (chr === utils_1.BYTES.NULL)
	                    break;
	                body += chr;
	            }
	        }
	        return new Frame(command, headers, body);
	    };
	    // Split the data before unmarshalling every single STOMP frame.
	    // Web socket servers can send multiple frames in a single websocket message.
	    // If the message size exceeds the websocket message size, then a single
	    // frame can be fragmented across multiple messages.
	    //
	    // `datas` is a string.
	    //
	    // returns an *array* of Frame objects
	    Frame.unmarshall = function (datas) {
	        // split and unmarshall *multiple STOMP frames* contained in a *single WebSocket frame*.
	        // The data is split when a NULL byte (followed by zero or many LF bytes) is found
	        var frames = datas.split(new RegExp(utils_1.BYTES.NULL + utils_1.BYTES.LF + '*')), firstFrames = frames.slice(0, -1), lastFrame = frames.slice(-1)[0], r = {
	            frames: firstFrames.map(function (f) { return Frame.unmarshallSingle(f); }),
	            partial: ''
	        };
	        // If this contains a final full message or just a acknowledgement of a PING
	        // without any other content, process this frame, otherwise return the
	        // contents of the buffer to the caller.
	        if (lastFrame === utils_1.BYTES.LF || (lastFrame.search(RegExp(utils_1.BYTES.NULL + utils_1.BYTES.LF + '*$'))) !== -1) {
	            r.frames.push(Frame.unmarshallSingle(lastFrame));
	        }
	        else {
	            r.partial = lastFrame;
	        }
	        return r;
	    };
	    // Marshall a Stomp frame
	    Frame.marshall = function (command, headers, body) {
	        var frame = new Frame(command, headers, body);
	        return frame.toString() + utils_1.BYTES.NULL;
	    };
	    return Frame;
	}());
	exports.default = Frame;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi93ZWJzdG9tcC1vYnMvc3JjL2ZyYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWdEO0FBUWhELHlGQUF5RjtBQUN6RjtJQVFJLG9CQUFvQjtJQUNwQixlQUFZLE9BQWUsRUFBRSxPQUF3QyxFQUFFLElBQWM7UUFBeEQsd0JBQUEsRUFBQSxVQUF1QixFQUFpQjtRQUFFLHFCQUFBLEVBQUEsU0FBYztRQUFyRixpQkFJQztRQUVELGlEQUFpRDtRQUNqRCxvQ0FBb0M7UUFDN0IsYUFBUSxHQUFHO1lBQ2QsSUFBSSxLQUFLLEdBQWEsQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLEVBQ2hDLGlCQUFpQixHQUFZLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLENBQ3hFO1lBQ0QsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUM7Z0JBQUMsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDbEMsSUFBSSxLQUFLLEdBQVEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsS0FBSyxDQUFDLElBQUksQ0FBSSxJQUFJLFNBQUksS0FBTyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFrQixrQkFBVSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUcsQ0FBQyxDQUFDO1lBQzFELENBQUM7WUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSSxDQUFDLElB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

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VERSIONS = {
	    V1_0: '1.0',
	    V1_1: '1.1',
	    V1_2: '1.2',
	    // Versions of STOMP specifications supported
	    supportedVersions: function () { return '1.2,1.1,1.0'; },
	    supportedProtocols: function () { return ['v10.stomp', 'v11.stomp', 'v12.stomp']; }
	};
	// Define constants for bytes used throughout the code.
	exports.BYTES = {
	    // LINEFEED byte (octet 10)
	    LF: '\x0A',
	    // NULL byte (octet 0)
	    NULL: '\x00'
	};
	// utility function to trim any whitespace before and after a string
	exports.trim = function (str) { return str.replace(/^\s+|\s+$/g, ''); };
	// from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/
	function unicodeStringToTypedArray(s) {
	    var escstr = encodeURIComponent(s);
	    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) { return String.fromCharCode(('0x' + p1)); });
	    var arr = Array.prototype.map.call(binstr, function (c) { return c.charCodeAt(0); });
	    return new Uint8Array(arr);
	}
	exports.unicodeStringToTypedArray = unicodeStringToTypedArray;
	// from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/
	function typedArrayToUnicodeString(ua) {
	    var binstr = String.fromCharCode.apply(String, ua);
	    var escstr = binstr.replace(/(.)/g, function (m, p) {
	        var code = p.charCodeAt(0).toString(16).toUpperCase();
	        if (code.length < 2) {
	            code = '0' + code;
	        }
	        return '%' + code;
	    });
	    return decodeURIComponent(escstr);
	}
	exports.typedArrayToUnicodeString = typedArrayToUnicodeString;
	// Compute the size of a UTF-8 string by counting its number of bytes
	// (and not the number of characters composing the string)
	function sizeOfUTF8(s) {
	    if (!s)
	        return 0;
	    return encodeURIComponent(s).match(/%..|./g).length;
	}
	exports.sizeOfUTF8 = sizeOfUTF8;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi93ZWJzdG9tcC1vYnMvc3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQWEsUUFBQSxRQUFRLEdBQUc7SUFDcEIsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsNkNBQTZDO0lBQzdDLGlCQUFpQixFQUFFLGNBQU0sT0FBQSxhQUFhLEVBQWIsQ0FBYTtJQUN0QyxrQkFBa0IsRUFBRSxjQUFNLE9BQUEsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxFQUF2QyxDQUF1QztDQUNwRSxDQUFDO0FBRUYsdURBQXVEO0FBQzFDLFFBQUEsS0FBSyxHQUFHO0lBQ2pCLDJCQUEyQjtJQUMzQixFQUFFLEVBQUUsTUFBTTtJQUNWLHNCQUFzQjtJQUN0QixJQUFJLEVBQUUsTUFBTTtDQUNmLENBQUM7QUFFRixvRUFBb0U7QUFDdkQsUUFBQSxJQUFJLEdBQUcsVUFBQyxHQUFXLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQztBQUVuRSxpR0FBaUc7QUFDakcsbUNBQTBDLENBQVM7SUFDL0MsSUFBSSxNQUFNLEdBQVcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxNQUFNLEdBQVcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFDLEtBQVUsRUFBRSxFQUFPLElBQUssT0FBQSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBUSxDQUFDLEVBQXZDLENBQXVDLENBQUMsQ0FBQztJQUN6SCxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsQ0FBUyxJQUFLLE9BQUEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBZixDQUFlLENBQUMsQ0FBQztJQUMzRSxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUxELDhEQUtDO0FBRUQsaUdBQWlHO0FBQ2pHLG1DQUEwQyxFQUFPO0lBQzdDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLE9BQW5CLE1BQU0sRUFBaUIsRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBUyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDdEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFWRCw4REFVQztBQUVELHFFQUFxRTtBQUNyRSwwREFBMEQ7QUFDMUQsb0JBQTJCLENBQVM7SUFDaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hELENBQUM7QUFIRCxnQ0FHQyJ9

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(28);
	var Heartbeat = (function () {
	    function Heartbeat(heartbeatSettings, debug) {
	        var _this = this;
	        // Heart-beat negotiation
	        this.startHeartbeat = function (headers, callback) {
	            _this.stopHeartbeat();
	            if (headers.version !== utils_1.VERSIONS.V1_1 && headers.version !== utils_1.VERSIONS.V1_2)
	                return;
	            // heart-beat header received from the server looks like:
	            //
	            //     heart-beat: sx, sy
	            var _a = (headers['heart-beat'] || '0,0').split(',').map(function (v) { return parseInt(v, 10); }), serverOutgoing = _a[0], serverIncoming = _a[1];
	            if (!(_this.heartbeatSettings.outgoing === 0 || serverIncoming === 0)) {
	                var ttl = Math.min(_this.heartbeatSettings.outgoing, serverIncoming);
	                _this._startPinger(ttl, callback.send);
	            }
	            if (!(_this.heartbeatSettings.incoming === 0 || serverOutgoing === 0)) {
	                var ttl = Math.min(_this.heartbeatSettings.incoming, serverOutgoing);
	                _this._startPonger(ttl, callback.close);
	            }
	        };
	        this.stopHeartbeat = function () {
	            clearInterval(_this.pinger);
	            clearInterval(_this.ponger);
	        };
	        this.activityFromServer = function () {
	            _this.lastServerActivity = Date.now();
	        };
	        this._startPinger = function (ttl, send) {
	            _this._debug("send PING every " + ttl + "ms");
	            _this.pinger = setInterval(function () {
	                send(utils_1.BYTES.LF);
	                _this._debug('>>> PING');
	            }, ttl);
	        };
	        this._startPonger = function (ttl, close) {
	            _this._debug("check PONG every " + ttl + "ms");
	            _this.lastServerActivity = Date.now();
	            _this.ponger = setInterval(function () {
	                var delta = Date.now() - _this.lastServerActivity;
	                // We wait twice the TTL to be flexible on window's setInterval calls
	                if (delta > ttl * 2) {
	                    _this._debug("did not receive server activity for the last " + delta + "ms");
	                    close();
	                }
	            }, ttl);
	        };
	        this._debug = function (message) {
	            var args = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                args[_i - 1] = arguments[_i];
	            }
	            _this.debug && _this.debug(message, args);
	        };
	        this.heartbeatSettings = heartbeatSettings;
	        this.debug = debug;
	    }
	    return Heartbeat;
	}());
	exports.default = Heartbeat;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcnRiZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vd2Vic3RvbXAtb2JzL3NyYy9oZWFydGJlYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxpQ0FBMEM7QUFPMUM7SUFVSSxtQkFBWSxpQkFBbUMsRUFBRSxLQUE2QztRQUE5RixpQkFHQztRQUVELHlCQUF5QjtRQUNsQixtQkFBYyxHQUFHLFVBQUUsT0FBeUIsRUFDekIsUUFDNEI7WUFDbEQsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssZ0JBQVEsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxnQkFBUSxDQUFDLElBQUksQ0FBQztnQkFBQyxNQUFNLENBQUM7WUFFbkYseURBQXlEO1lBQ3pELEVBQUU7WUFDRix5QkFBeUI7WUFDbkIsSUFBQSw4RkFBa0gsRUFBakgsc0JBQWMsRUFBRSxzQkFBYyxDQUFvRjtZQUV6SCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO2dCQUN0RSxLQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7Z0JBQ3RFLEtBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBO1FBRU0sa0JBQWEsR0FBRztZQUNuQixhQUFhLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLGFBQWEsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFBO1FBRU0sdUJBQWtCLEdBQUc7WUFDeEIsS0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN6QyxDQUFDLENBQUE7UUFFTyxpQkFBWSxHQUFHLFVBQUMsR0FBVyxFQUFFLElBQXdCO1lBQ3pELEtBQUksQ0FBQyxNQUFNLENBQUMscUJBQW1CLEdBQUcsT0FBSSxDQUFDLENBQUM7WUFDeEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxhQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2YsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1QixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUE7UUFFTyxpQkFBWSxHQUFHLFVBQUMsR0FBVyxFQUFFLEtBQWU7WUFDaEQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBb0IsR0FBRyxPQUFJLENBQUMsQ0FBQztZQUN6QyxLQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3JDLEtBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUN0QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDO2dCQUNuRCxxRUFBcUU7Z0JBQ3JFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxrREFBZ0QsS0FBSyxPQUFJLENBQUMsQ0FBQztvQkFDdkUsS0FBSyxFQUFFLENBQUM7Z0JBQ1osQ0FBQztZQUNMLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQTtRQUVPLFdBQU0sR0FBRyxVQUFDLE9BQVk7WUFBRSxjQUFjO2lCQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7Z0JBQWQsNkJBQWM7O1lBQzFDLEtBQUksQ0FBQyxLQUFLLElBQUksS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFBO1FBM0RHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBMkRMLGdCQUFDO0FBQUQsQ0FBQyxBQXhFRCxJQXdFQztBQUVELGtCQUFlLFNBQVMsQ0FBQyJ9

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(18);
	var queue_1 = __webpack_require__(31);
	var Subscription_1 = __webpack_require__(9);
	var observeOn_1 = __webpack_require__(38);
	var ObjectUnsubscribedError_1 = __webpack_require__(19);
	var SubjectSubscription_1 = __webpack_require__(20);
	/**
	 * @class ReplaySubject<T>
	 */
	var ReplaySubject = (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
	        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
	        _super.call(this);
	        this.scheduler = scheduler;
	        this._events = [];
	        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        this._windowTime = windowTime < 1 ? 1 : windowTime;
	    }
	    ReplaySubject.prototype.next = function (value) {
	        var now = this._getNow();
	        this._events.push(new ReplayEvent(now, value));
	        this._trimBufferThenGetEvents();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var _events = this._trimBufferThenGetEvents();
	        var scheduler = this.scheduler;
	        var subscription;
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscription = Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscription = Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	        if (scheduler) {
	            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
	        }
	        var len = _events.length;
	        for (var i = 0; i < len && !subscriber.closed; i++) {
	            subscriber.next(_events[i].value);
	        }
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	        }
	        return subscription;
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue_1.queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
	        var now = this._getNow();
	        var _bufferSize = this._bufferSize;
	        var _windowTime = this._windowTime;
	        var _events = this._events;
	        var eventsCount = _events.length;
	        var spliceCount = 0;
	        // Trim events that fall out of the time window.
	        // Start at the front of the list. Break early once
	        // we encounter an event that falls within the window.
	        while (spliceCount < eventsCount) {
	            if ((now - _events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount++;
	        }
	        if (eventsCount > _bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
	        }
	        if (spliceCount > 0) {
	            _events.splice(0, spliceCount);
	        }
	        return _events;
	    };
	    return ReplaySubject;
	}(Subject_1.Subject));
	exports.ReplaySubject = ReplaySubject;
	var ReplayEvent = (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	}());
	//# sourceMappingURL=ReplaySubject.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var QueueAction_1 = __webpack_require__(32);
	var QueueScheduler_1 = __webpack_require__(35);
	/**
	 *
	 * Queue Scheduler
	 *
	 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
	 *
	 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
	 *
	 * When used without delay, it schedules given task synchronously - executes it right when
	 * it is scheduled. However when called recursively, that is when inside the scheduled task,
	 * another task is scheduled with queue scheduler, instead of executing immediately as well,
	 * that task will be put on a queue and wait for current one to finish.
	 *
	 * This means that when you execute task with `queue` scheduler, you are sure it will end
	 * before any other task scheduled with that scheduler will start.
	 *
	 * @examples <caption>Schedule recursively first, then do something</caption>
	 *
	 * Rx.Scheduler.queue.schedule(() => {
	 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
	 *
	 *   console.log('first');
	 * });
	 *
	 * // Logs:
	 * // "first"
	 * // "second"
	 *
	 *
	 * @example <caption>Reschedule itself recursively</caption>
	 *
	 * Rx.Scheduler.queue.schedule(function(state) {
	 *   if (state !== 0) {
	 *     console.log('before', state);
	 *     this.schedule(state - 1); // `this` references currently executing Action,
	 *                               // which we reschedule with new state
	 *     console.log('after', state);
	 *   }
	 * }, 0, 3);
	 *
	 * // In scheduler that runs recursively, you would expect:
	 * // "before", 3
	 * // "before", 2
	 * // "before", 1
	 * // "after", 1
	 * // "after", 2
	 * // "after", 3
	 *
	 * // But with queue it logs:
	 * // "before", 3
	 * // "after", 3
	 * // "before", 2
	 * // "after", 2
	 * // "before", 1
	 * // "after", 1
	 *
	 *
	 * @static true
	 * @name queue
	 * @owner Scheduler
	 */
	exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
	//# sourceMappingURL=queue.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncAction_1 = __webpack_require__(33);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var QueueAction = (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay exists and is greater than 0, or if the delay is null (the
	        // action wasn't rescheduled) but was originally scheduled as an async
	        // action, then recycle as an async action.
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        // Otherwise flush the scheduler starting with this action.
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction_1.AsyncAction));
	exports.QueueAction = QueueAction;
	//# sourceMappingURL=QueueAction.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(5);
	var Action_1 = __webpack_require__(34);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AsyncAction = (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	        this.pending = false;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        // Always replace the current state with the new state.
	        this.state = state;
	        // Set the pending flag indicating that this action has been scheduled, or
	        // has recursively rescheduled itself.
	        this.pending = true;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        //
	        // Important implementation note:
	        //
	        // Actions only execute once by default, unless rescheduled from within the
	        // scheduled callback. This allows us to implement single and repeat
	        // actions via the same code path, without adding API surface area, as well
	        // as mimic traditional recursion but across asynchronous boundaries.
	        //
	        // However, JS runtimes and timers distinguish between intervals achieved by
	        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
	        // serial `setTimeout` calls can be individually delayed, which delays
	        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
	        // guarantee the interval callback will be invoked more precisely to the
	        // interval period, regardless of load.
	        //
	        // Therefore, we use `setInterval` to schedule single and repeat actions.
	        // If the action reschedules itself with the same delay, the interval is not
	        // canceled. If the action doesn't reschedule, or reschedules with a
	        // different delay, the interval will be canceled after scheduled callback
	        // execution.
	        //
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.delay = delay;
	        // If this action has already an async Id, don't request a new one.
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If this action is rescheduled with the same delay time, don't clear the interval id.
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        // Otherwise, if the action's delay time is different from the current delay,
	        // or the action has been rescheduled before it's executed, clear the interval id
	        return root_1.root.clearInterval(id) && undefined || undefined;
	    };
	    /**
	     * Immediately executes this action and the `work` it contains.
	     * @return {any}
	     */
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            // Dequeue if the action didn't reschedule itself. Don't call
	            // unsubscribe(), because the action could reschedule later.
	            // For example:
	            // ```
	            // scheduler.schedule(function doWork(counter) {
	            //   /* ... I'm a busy worker bee ... */
	            //   var originalAction = this;
	            //   /* wait 100ms before rescheduling the action */
	            //   setTimeout(function () {
	            //     originalAction.schedule(counter + 1);
	            //   }, 100);
	            // }, 1000);
	            // ```
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.delay = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	    };
	    return AsyncAction;
	}(Action_1.Action));
	exports.AsyncAction = AsyncAction;
	//# sourceMappingURL=AsyncAction.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(9);
	/**
	 * A unit of work to be executed in a {@link Scheduler}. An action is typically
	 * created from within a Scheduler and an RxJS user does not need to concern
	 * themselves about creating and manipulating an Action.
	 *
	 * ```ts
	 * class Action<T> extends Subscription {
	 *   new (scheduler: Scheduler, work: (state?: T) => void);
	 *   schedule(state?: T, delay: number = 0): Subscription;
	 * }
	 * ```
	 *
	 * @class Action<T>
	 */
	var Action = (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        _super.call(this);
	    }
	    /**
	     * Schedules this action on its parent Scheduler for execution. May be passed
	     * some context object, `state`. May happen at some point in the future,
	     * according to the `delay` parameter, if specified.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler.
	     * @return {void}
	     */
	    Action.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        return this;
	    };
	    return Action;
	}(Subscription_1.Subscription));
	exports.Action = Action;
	//# sourceMappingURL=Action.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncScheduler_1 = __webpack_require__(36);
	var QueueScheduler = (function (_super) {
	    __extends(QueueScheduler, _super);
	    function QueueScheduler() {
	        _super.apply(this, arguments);
	    }
	    return QueueScheduler;
	}(AsyncScheduler_1.AsyncScheduler));
	exports.QueueScheduler = QueueScheduler;
	//# sourceMappingURL=QueueScheduler.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Scheduler_1 = __webpack_require__(37);
	var AsyncScheduler = (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler() {
	        _super.apply(this, arguments);
	        this.actions = [];
	        /**
	         * A flag to indicate whether the Scheduler is currently executing a batch of
	         * queued actions.
	         * @type {boolean}
	         */
	        this.active = false;
	        /**
	         * An internal ID used to track the latest asynchronous task such as those
	         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
	         * others.
	         * @type {any}
	         */
	        this.scheduled = undefined;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift()); // exhaust the scheduler queue
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler_1.Scheduler));
	exports.AsyncScheduler = AsyncScheduler;
	//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	"use strict";
	/**
	 * An execution context and a data structure to order tasks and schedule their
	 * execution. Provides a notion of (potentially virtual) time, through the
	 * `now()` getter method.
	 *
	 * Each unit of work in a Scheduler is called an {@link Action}.
	 *
	 * ```ts
	 * class Scheduler {
	 *   now(): number;
	 *   schedule(work, delay?, state?): Subscription;
	 * }
	 * ```
	 *
	 * @class Scheduler
	 */
	var Scheduler = (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    /**
	     * Schedules a function, `work`, for execution. May happen at some point in
	     * the future, according to the `delay` parameter, if specified. May be passed
	     * some context object, `state`, which will be passed to the `work` function.
	     *
	     * The given arguments will be processed an stored as an Action object in a
	     * queue of actions.
	     *
	     * @param {function(state: ?T): ?Subscription} work A function representing a
	     * task, or some unit of work to be executed by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler itself.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @return {Subscription} A subscription in order to be able to unsubscribe
	     * the scheduled work.
	     */
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
	    return Scheduler;
	}());
	exports.Scheduler = Scheduler;
	//# sourceMappingURL=Scheduler.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(7);
	var Notification_1 = __webpack_require__(39);
	/**
	 *
	 * Re-emits all notifications from source Observable with specified scheduler.
	 *
	 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
	 *
	 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
	 * notifications emitted by the source Observable. It might be useful, if you do not have control over
	 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
	 *
	 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
	 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
	 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
	 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
	 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
	 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
	 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
	 * little bit more, to ensure that they are emitted at expected moments.
	 *
	 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
	 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
	 * will delay all notifications - including error notifications - while `delay` will pass through error
	 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
	 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
	 * for notification emissions in general.
	 *
	 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
	 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
	 *                                               // with async scheduler by default...
	 *
	 * intervals
	 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
	 * .subscribe(val => {                           // scheduler to ensure smooth animation.
	 *   someDiv.style.height = val + 'px';
	 * });
	 *
	 * @see {@link delay}
	 *
	 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
	 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
	 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
	 * but with provided scheduler.
	 *
	 * @method observeOn
	 * @owner Observable
	 */
	function observeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return this.lift(new ObserveOnOperator(scheduler, delay));
	}
	exports.observeOn = observeOn;
	var ObserveOnOperator = (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
	    };
	    return ObserveOnOperator;
	}());
	exports.ObserveOnOperator = ObserveOnOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ObserveOnSubscriber = (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification_1.Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification_1.Notification.createError(err));
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification_1.Notification.createComplete());
	    };
	    return ObserveOnSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ObserveOnSubscriber = ObserveOnSubscriber;
	var ObserveOnMessage = (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());
	exports.ObserveOnMessage = ObserveOnMessage;
	//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	/**
	 * Represents a push-based event or value that an {@link Observable} can emit.
	 * This class is particularly useful for operators that manage notifications,
	 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
	 * others. Besides wrapping the actual delivered value, it also annotates it
	 * with metadata of, for instance, what type of push message it is (`next`,
	 * `error`, or `complete`).
	 *
	 * @see {@link materialize}
	 * @see {@link dematerialize}
	 * @see {@link observeOn}
	 *
	 * @class Notification<T>
	 */
	var Notification = (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    /**
	     * Delivers to the given `observer` the value wrapped by this Notification.
	     * @param {Observer} observer
	     * @return
	     */
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.error);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    /**
	     * Given some {@link Observer} callbacks, deliver the value represented by the
	     * current Notification to the correctly corresponding callback.
	     * @param {function(value: T): void} next An Observer `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.error);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    /**
	     * Takes an Observer or its individual callback functions, and calls `observe`
	     * or `do` methods accordingly.
	     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
	     * the `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    /**
	     * Returns a simple Observable that just delivers the notification represented
	     * by this Notification instance.
	     * @return {any}
	     */
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return Observable_1.Observable.of(this.value);
	            case 'E':
	                return Observable_1.Observable.throw(this.error);
	            case 'C':
	                return Observable_1.Observable.empty();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `next` from a
	     * given value.
	     * @param {T} value The `next` value.
	     * @return {Notification<T>} The "next" Notification representing the
	     * argument.
	     */
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return this.undefinedValueNotification;
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `error` from a
	     * given error.
	     * @param {any} [err] The `error` error.
	     * @return {Notification<T>} The "error" Notification representing the
	     * argument.
	     */
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `complete`.
	     * @return {Notification<any>} The valueless "complete" Notification.
	     */
	    Notification.createComplete = function () {
	        return this.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());
	exports.Notification = Notification;
	//# sourceMappingURL=Notification.js.map

/***/ })
/******/ ])
});
;