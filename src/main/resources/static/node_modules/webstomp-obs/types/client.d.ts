import { ConnectedClient } from './connectedClient';
import { ConnectionHeaders } from './headers';
import { Observable } from 'rxjs/Observable';
import { WsOptions } from './webSocketHandler';
import 'rxjs/add/operator/multicast';
export interface IWebSocket {
    binaryType: string;
    onmessage: Function;
    onclose: Function;
    onopen: Function;
    close: Function;
    send: Function;
    url: string;
}
export interface ClientOptions extends WsOptions {
    maxConnectAttempt: number;
    ttlConnectAttempt: number;
}
declare class Client {
    private wsHandler;
    private observableConnection;
    private nbConnectAttempt;
    private connectTimeout;
    private maxConnectAttempt;
    private ttlConnectAttempt;
    private isConnected;
    constructor(createWsConnection: () => IWebSocket, options: ClientOptions);
    connect: (headers: ConnectionHeaders) => Observable<ConnectedClient>;
    private __connect;
    private __initConnectedClient;
}
export default Client;
