import { Observable } from 'rxjs/Observable';
import WebSocketHandler from './webSocketHandler';
import 'rxjs/add/operator/multicast';
import 'rxjs/add/operator/finally';
import Frame from './frame';
import { ACK, AckHeaders, SendHeaders } from './headers';
export declare class ConnectedClient {
    private webSocketClient;
    private counter;
    private subscriptions;
    private broadcastSubscribers;
    private broadcastReceipterObservable;
    private broadcastReceipterObserver;
    private broadcastErrorObservable;
    private broadcastErrorObserver;
    private broadcastConnectionErrorObservable;
    private broadcastConnectionErrorObserver;
    constructor(webSocketClient: WebSocketHandler);
    private _onMessageReceivedFn;
    private _onErrorReceivedFn;
    private _onConnectionErrorReceivedFn;
    private _onMessageReceiptedFn;
    send: (destination: string, body?: string, headers?: SendHeaders) => void;
    begin: (transaction?: string) => {
        id: any;
        commit: any;
        abort: any;
    };
    commit: (transaction: string) => void;
    abort: (transaction: string) => void;
    ack: (messageID: string, subscription: string, headers?: AckHeaders) => void;
    nack: (messageID: string, subscription: string, headers?: AckHeaders) => void;
    receipt: () => Observable<Frame>;
    connectionError: () => Observable<CloseEvent>;
    error: () => Observable<Frame>;
    subscribe: (destination: string, headers?: {
        id?: string;
        ack?: ACK;
    }) => Observable<Frame>;
    subscribeBroadcast: (destination: string, headers?: {
        id?: string;
        ack?: ACK;
    }) => Observable<Frame>;
}
