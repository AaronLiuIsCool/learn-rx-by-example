import { Observable } from 'rxjs/Observable';
import { IWebSocket } from './client';
import { AckHeaders, ConnectionHeaders, DisconnectHeaders, SubscribeHeaders, UnsubscribeHeaders } from './headers';
import { HeartbeatOptions } from './heartbeat';
export interface Subscription {
    id: string;
    unsubscribe: () => void;
}
export interface IEvent {
    data: any;
}
export interface WsOptions {
    binary: boolean;
    heartbeat: HeartbeatOptions | boolean;
    debug: boolean;
}
declare class WebSocketHandler {
    private ws;
    private isBinary;
    private hasDebug;
    private counter;
    private connected;
    private maxWebSocketFrameSize;
    private partialData;
    private createWS;
    private version;
    private heartbeatSettings;
    private heartbeat;
    onMessageReceived: (subscription: string) => (Frame) => void;
    onMessageReceipted: () => (Frame) => void;
    onErrorReceived: () => (Frame) => void;
    onConnectionError: () => (ev: CloseEvent) => void;
    constructor(createWsConnection: () => IWebSocket, options: WsOptions);
    initConnection: (headers: ConnectionHeaders, onDisconnect: (ev: any) => void) => Observable<void>;
    private _setupHeartbeat;
    disconnect: (headers?: DisconnectHeaders) => void;
    send: (headers?: any, body?: any) => void;
    begin: (transaction?: any) => {
        id: any;
        commit: any;
        abort: any;
    };
    commit: (transaction: string) => void;
    abort: (transaction: string) => void;
    ack: (messageID: string, subscription: string, headers?: AckHeaders) => void;
    nack: (messageID: string, subscription: string, headers?: AckHeaders) => void;
    private _getIdAttr;
    subscribe: (headers: SubscribeHeaders) => {
        id: string;
        unsubscribe: any;
    };
    unSubscribe: (headers: UnsubscribeHeaders) => void;
    private _transmit;
    private _wsSend;
    private _debug;
}
export default WebSocketHandler;
